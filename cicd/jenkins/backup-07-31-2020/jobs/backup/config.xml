<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>set +x


echo &quot;Build number: $BUILD_NUMBER&quot;
echo &quot;Build ID: $BUILD_ID&quot;
echo &quot;Job name: $JOB_NAME&quot;
echo &quot;Build tag: $BUILD_TAG&quot;
echo &quot;Node name: $NODE_NAME&quot;
echo &quot;Node labels: $NODE_LABELS&quot;
echo &quot;Workspace: $WORKSPACE&quot;
echo &quot;Jenkins URL: $JENKINS_URL&quot;
echo &quot;Jenkins Home: $JENKINS_HOME&quot;



WS=$WORKSPACE
GITDIR=&quot;devops&quot;
CLONE_HOME=&quot;$WS/$GITDIR&quot;



function check_directory (){
	echo &quot;Inside the function&quot;
    if [ -d $1/builds ]
    then
    echo &quot;Inside the if condition of the function&quot;
     cp -r $1/builds $APP/
    fi
    
    if [ -d $1/version ]
    then
    echo &quot;Inside the if condition of the function&quot;
     cp -r $1/version $APP/
    fi
    
    if [ -f $1/config.xml ]
    then
    echo &quot;Inside the if condition of the function&quot;
     cp -r $1/config.xml $APP/
    fi
}


if [ -d $CLONE_HOME ]

then
  chmod -R 755 $CLONE_HOME
  # Directory exists, remove it so git clone will work . . .
  echo &quot;Removing existing devops directory for git clone.&quot;
  rm -rf $CLONE_HOME
fi


git clone https://github.com/helxplatform/devops.git

backup_date=`date +&apos;%m-%d-%Y&apos;`

cd $CLONE_HOME/cicd/jenkins/

echo &quot;the first ls&quot;
echo &quot;$(ls)&quot;

echo &quot;removing the backup dir&quot;
rm -rf backup-*


echo &quot;after removing the dir&quot;
echo &quot;my dire  $(ls)&quot;

mkdir backup-$backup_date

cd backup-$backup_date
mkdir jobs &amp;&amp; cd jobs
echo &quot;Current Dir- $(pwd)&quot;

for d in $JENKINS_HOME/jobs/*; do
	
    APP=`basename $d`
    
	mkdir $APP 
    
    APP_PATH=$JENKINS_HOME/jobs/$APP
    echo &quot;$APP&quot;
    
    if [ -d $APP_PATH/jobs ]      
    then
    echo &quot;if : just app_path/jobs&quot;
    echo &quot;Current Dir- $APP_PATH&quot;
        if [ -d $APP_PATH/jobs/$APP ]
        then
            echo &quot;another if : app_path/jobs/app&quot;
           	DIR=$APP_PATH/jobs/$APP
            echo &quot;Before calling the function&quot;
            check_directory &quot;$DIR&quot;
            echo &quot;function test successful&quot;
            echo &quot;The current dir : $APP_PATH/jobs/$APP/&quot; 
        	echo &quot;$(ls -al $APP_PATH/jobs/$APP/)&quot;
     	else
        	echo &quot;The current dir: $APP_PATH/jobs/&quot;
        	echo &quot;$(ls -al $APP_PATH/jobs/)&quot;
            DIR=$APP_PATH/jobs/
            check_directory &quot;$DIR&quot;            
        fi
        
    else
    
    	echo &quot;else, the current dir: $APP_PATH/&quot;
    	echo &quot;$(ls -al $APP_PATH/ )&quot;
        DIR=$APP_PATH/
        check_directory &quot;$DIR&quot;    
    fi
    
    
done

cd ..

cp $JENKINS_HOME/config.xml .

echo &quot;First breakpoint&quot; 
git remote set-url origin https://rencibuild:$GIT_PASSWORD@github.com/helxplatform/devops.git

git config --global push.default simple

git add -u :/


echo &quot;second&quot;

git add .

git commit -m &quot;Automated Jenkins backup &apos;$backup_date&apos;&quot;

git push</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <EnvInjectPasswordWrapper plugin="envinject@2.3.0">
      <injectGlobalPasswords>false</injectGlobalPasswords>
      <maskPasswordParameters>true</maskPasswordParameters>
      <passwordEntries>
        <EnvInjectPasswordEntry>
          <name>GIT_PASSWORD</name>
          <value>{AQAAABAAAAAQT0pliWMxyr4yloDPrrmM7EkGDxWYwqrGK+Fk6eZd198=}</value>
        </EnvInjectPasswordEntry>
      </passwordEntries>
    </EnvInjectPasswordWrapper>
  </buildWrappers>
</project>