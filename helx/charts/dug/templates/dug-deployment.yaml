apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ .Values.dug.app_name}}
  name: {{ .Values.dug.deployment_name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.dug.app_name}}
  template:
    metadata:
      labels:
        app: {{ .Values.dug.app_name}}
    spec:
      {{- with .Values.dug.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - image: {{ .Values.dug.image.repository }}:{{ .Values.dug.image.tag }}
        imagePullPolicy: {{ .Values.dug.image.pullPolicy }}
        name: {{ .Values.dug.app_name}}-container
        env:
        - name: ELASTIC_API_HOST
          value: {{ .Values.elasticsearch.service_name }}
        - name: ELASTIC_API_PORT
          value: {{ .Values.elasticsearch.rest_port | quote }}
        - name: ELASTIC_USER
          value: {{ .Values.elasticsearch.db_user }}
        - name: ELASTIC_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.secrets.name }}
              key: ELASTIC_PASSWORD
        - name: NEO4J_HOST
          value: {{ .Values.neo4j.service_name }}
        - name: NEO4J_PORT
          value: {{ .Values.neo4j.http_port | quote }}
        - name: NEO4J_USER
          value: {{ .Values.neo4j.db_user }}
        - name: NEO4J_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.secrets.name }}
              key: NEO4J_PASSWORD
        - name: REDIS_HOST
          value: {{ .Values.redis.service_name }}
        - name: REDIS_PORT
          value: {{ .Values.redis.redis_port | quote }}
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.secrets.name }}
              key: REDIS_PASSWORD
        - name: NBOOST_API_HOST
          value: {{ .Values.nboost.service_name }}
        {{- range $key, $value := .Values.dug.extraEnv }}
        - name: {{ $key }}
          value: {{ $value }}
        {{- end }}
        ports:
          - containerPort: {{ .Values.dug.api_port }}
        command: ["/bin/bash", "-c", "/app/run-dug-and-crawl.sh"]
        volumeMounts:
        - name: scripts-vol
          mountPath: /app
      volumes:
        - name: scripts-vol
          configMap:
            name: dug-scripts-configmap
            defaultMode: 0775
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: dug-scripts-configmap
data:
  run-dug-and-crawl.sh: |
        set -m
        wait_for()
        {
          echo -n "waiting for $1"
          while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' $2:$3)" != "$4" ]]
          do
            printf '.'
            sleep 5
          done
        }
        wait_for elasticsearch $ELASTIC_API_HOST $ELASTIC_API_PORT 401
        python -m dug.api {{ if .Values.dug.debug }}--debug{{ end }} &
        wait_for dug {{ .Values.dug.service_name }} {{ .Values.dug.api_port }} 404
        cp docker/.env.template docker/.env.dev
        env >> docker/.env.dev
        {{ .Values.dug.crawl_command }}
        fg
