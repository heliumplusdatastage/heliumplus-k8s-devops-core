// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using System;

namespace Renci.ReCCAP.Dashboard.Web.Data.Migrations.ApplicationDb
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200811181740_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FriendlyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Xml")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Renci.ReCCAP.Dashboard.Web.Data.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Permissions")
                        .HasColumnName("Permissions")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("df7d657d-603a-48af-979e-92a25892cad1"),
                            ConcurrencyStamp = "2e91ff1f-4102-42f8-bae8-488133b4ebc6",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedUserId = new Guid("7b8150c0-6837-484f-a68b-e2d0b2c1f50e"),
                            Name = "Administrator",
                            Permissions = "[]"
                        },
                        new
                        {
                            Id = new Guid("35826fa7-12f6-4ff3-bb21-fdcd591eff8d"),
                            ConcurrencyStamp = "648606ca-5f39-492c-8326-3f86cd2dbb53",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedUserId = new Guid("7b8150c0-6837-484f-a68b-e2d0b2c1f50e"),
                            Name = "Users",
                            Permissions = "[]"
                        });
                });

            modelBuilder.Entity("Renci.ReCCAP.Dashboard.Web.Data.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Permissions")
                        .HasColumnName("Permissions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7b8150c0-6837-484f-a68b-e2d0b2c1f50e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "343b83b4-e1cc-4bdf-a78a-16cecaf44ae7",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "System User",
                            Email = "noreply@renci.org",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NOREPLY@RENCI.ORG",
                            NormalizedUserName = "SYSTEM",
                            Permissions = "[]",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ST635EPP5AO2AFLE32XBUGXKTUEDECRH",
                            TwoFactorEnabled = false,
                            UserName = "System"
                        },
                        new
                        {
                            Id = new Guid("d7e05ee8-d900-4008-81a1-5375d69c7f03"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2016c062-c5f1-4ee5-8cfc-d59736372bc0",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Administrator",
                            Email = "noreply@renci.org",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NOREPLY@RENCI.ORG",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAELBquuuXUxloH/MmNG3ynEqbNx4dJxPHKPYc1PytMkZ/i4VxbeOcQiq+9XITXjmuXA==",
                            Permissions = "[65535]",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "AJ5AXSDLESEQIV23V42YFJQSQHPVLMOL",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Renci.ReCCAP.Dashboard.Web.Data.Report", b =>
                {
                    b.Property<Guid>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DefaultSort")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NameSEO")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("OrderSequence")
                        .HasColumnType("int");

                    b.Property<string>("QueryContext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QueryText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReportTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ReportId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("IX_Report_Unique");

                    b.HasIndex("NameSEO")
                        .IsUnique()
                        .HasName("IX_Report_NameSEO_Unique");

                    b.HasIndex("ReportTypeId");

                    b.ToTable("Report", "Report");
                });

            modelBuilder.Entity("Renci.ReCCAP.Dashboard.Web.Data.ReportChartType", b =>
                {
                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChartType")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("ReportId", "ChartType");

                    b.HasIndex("ChartType");

                    b.ToTable("ReportChartType", "Report");
                });

            modelBuilder.Entity("Renci.ReCCAP.Dashboard.Web.Data.ReportColumn", b =>
                {
                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("CanDownload")
                        .HasColumnType("bit");

                    b.Property<bool>("CanView")
                        .HasColumnType("bit");

                    b.Property<string>("ClassName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContextMenu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("DisplayValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderSequence")
                        .HasColumnType("int");

                    b.Property<string>("SortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("ReportId", "Name");

                    b.ToTable("ReportColumn", "Report");
                });

            modelBuilder.Entity("Renci.ReCCAP.Dashboard.Web.Data.ReportParameter", b =>
                {
                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("CustomData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("HintText")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("OrderSequence")
                        .HasColumnType("int");

                    b.Property<string>("ParameterDataType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportId", "Name");

                    b.ToTable("ReportParameter", "Report");
                });

            modelBuilder.Entity("Renci.ReCCAP.Dashboard.Web.Data.ReportRole", b =>
                {
                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReportId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("ReportRole", "Report");
                });

            modelBuilder.Entity("Renci.ReCCAP.Dashboard.Web.Data.Type", b =>
                {
                    b.Property<Guid>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NameSEO")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("OrderSequence")
                        .HasColumnType("int");

                    b.Property<Guid?>("ParentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("TypeId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("ParentTypeId");

                    b.HasIndex("Category", "Code")
                        .IsUnique()
                        .HasName("IX_Type_Code")
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("Category", "Name")
                        .IsUnique()
                        .HasName("IX_Type_Unique");

                    b.HasIndex("Category", "NameSEO")
                        .IsUnique()
                        .HasName("IX_Type_NameSEO_Unique");

                    b.ToTable("Type", "Common");

                    b.HasData(
                        new
                        {
                            TypeId = new Guid("796056fa-fb7e-471e-9887-11a4a64ffd4a"),
                            Category = "ReportType",
                            CreatedDate = new DateTime(2020, 8, 11, 14, 17, 40, 369, DateTimeKind.Local).AddTicks(2684),
                            CreatedUserId = new Guid("7b8150c0-6837-484f-a68b-e2d0b2c1f50e"),
                            IsActive = true,
                            Name = "General",
                            NameSEO = "general",
                            OrderSequence = 1
                        });
                });

            modelBuilder.Entity("Renci.ReCCAP.Dashboard.Web.Data.TypeRole", b =>
                {
                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TypeId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("TypeRole", "Common");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Renci.ReCCAP.Dashboard.Web.Data.ApplicationRole", null)
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_RoleClaim_Role")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Renci.ReCCAP.Dashboard.Web.Data.ApplicationUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserClaim_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Renci.ReCCAP.Dashboard.Web.Data.ApplicationUser", null)
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserLogin_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Renci.ReCCAP.Dashboard.Web.Data.ApplicationRole", null)
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_UserRole_Role")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Renci.ReCCAP.Dashboard.Web.Data.ApplicationUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserRole_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Renci.ReCCAP.Dashboard.Web.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Renci.ReCCAP.Dashboard.Web.Data.ApplicationRole", b =>
                {
                    b.HasOne("Renci.ReCCAP.Dashboard.Web.Data.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .HasConstraintName("FK_Role_CreatedUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Renci.ReCCAP.Dashboard.Web.Data.ApplicationUser", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId")
                        .HasConstraintName("FK_Role_ModifiedUser")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Renci.ReCCAP.Dashboard.Web.Data.Report", b =>
                {
                    b.HasOne("Renci.ReCCAP.Dashboard.Web.Data.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .HasConstraintName("FK_Report_CreatedUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Renci.ReCCAP.Dashboard.Web.Data.ApplicationUser", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId")
                        .HasConstraintName("FK_Report_ModifiedUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Renci.ReCCAP.Dashboard.Web.Data.Type", "ReportType")
                        .WithMany()
                        .HasForeignKey("ReportTypeId")
                        .HasConstraintName("FK_Report_ReportType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Renci.ReCCAP.Dashboard.Web.Data.ReportChartType", b =>
                {
                    b.HasOne("Renci.ReCCAP.Dashboard.Web.Data.Report", "Report")
                        .WithMany("ChartTypes")
                        .HasForeignKey("ReportId")
                        .HasConstraintName("FK_ReportChartType_Report")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Renci.ReCCAP.Dashboard.Web.Data.ReportColumn", b =>
                {
                    b.HasOne("Renci.ReCCAP.Dashboard.Web.Data.Report", "Report")
                        .WithMany("ReportColumns")
                        .HasForeignKey("ReportId")
                        .HasConstraintName("FK_ReportColumn_Report")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Renci.ReCCAP.Dashboard.Web.Data.ReportParameter", b =>
                {
                    b.HasOne("Renci.ReCCAP.Dashboard.Web.Data.Report", "Report")
                        .WithMany("ReportParameters")
                        .HasForeignKey("ReportId")
                        .HasConstraintName("FK_ReportParameter_Report")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Renci.ReCCAP.Dashboard.Web.Data.ReportRole", b =>
                {
                    b.HasOne("Renci.ReCCAP.Dashboard.Web.Data.Report", "Report")
                        .WithMany("Roles")
                        .HasForeignKey("ReportId")
                        .HasConstraintName("FK_ReportRole_Report")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Renci.ReCCAP.Dashboard.Web.Data.ApplicationRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_ReportRole_Role")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Renci.ReCCAP.Dashboard.Web.Data.Type", b =>
                {
                    b.HasOne("Renci.ReCCAP.Dashboard.Web.Data.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .HasConstraintName("FK_Type_CreatedUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Renci.ReCCAP.Dashboard.Web.Data.ApplicationUser", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId")
                        .HasConstraintName("FK_Type_ModifiedUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Renci.ReCCAP.Dashboard.Web.Data.Type", "ParentType")
                        .WithMany()
                        .HasForeignKey("ParentTypeId")
                        .HasConstraintName("FK_Type_ParentType")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Renci.ReCCAP.Dashboard.Web.Data.TypeRole", b =>
                {
                    b.HasOne("Renci.ReCCAP.Dashboard.Web.Data.ApplicationRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_TypeRole_Role")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Renci.ReCCAP.Dashboard.Web.Data.Type", "Type")
                        .WithMany("Roles")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("FK_TypeRole_Type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
